
const {Telegraf} = require ('telegraf');
const { Readable } = require ('stream');
const pageDeploy = require('./webScraping/pageDeploy');
const fs = require('fs');

//function that converts buffer to stream
function bufferToStream(buffer) {
    const readable = new Readable();
  
    readable._read = () => {};
    readable.push(buffer);
    readable.push(null);
  
    return readable;
}
  
async function robot() {
    const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
    let sn = '';
    let count = 0;
    bot.start();

    bot.start((ctx) => {
        ctx.replyWithHTML(`Bienvenido al bot para validaci√≥n de Set-Top Box HFC. <b>√önicamente modelos DCX y DCT</b>.  Escribe /help para descubrir como funciona`);
    });

    let text = `Debido a que √©ste es un robot ü§ñ trabaja con comandos, por ejemplo para validar una Set-Top Box:` +     
                `Escribe /validar y luego el robot te solicitar√° el numero de serie de la STB ( no olivedes anteponer "/" ).\n` +
                `Ingresa el numero de serie sin importar min√∫sculas o may√∫sculas, dale enviar y espera aproximadamente 3 minutos mientras el robot hace la consulta.\n\n` +
                `Cuando el robot finalice la consulta te devolver√° 3 im√°genes en orden aleatorio:\n\n` +
                `1Ô∏è‚É£ "Pesta√±a Configuration" Indica donde est√° instalada la STB.\n\n` +
                `2Ô∏è‚É£ "Pesta√±a Authorization" Indica qu√© paquetes tiene aprovisionados desde el DAC.\n\n` +
                `3Ô∏è‚É£ "Pesta√±a Status" Indica si la STB tiene retorno; para esta opcion debes validar el campo "last response" si conincide con la hora que estas haciendo la consulta significa que la STB SI ‚úÖ tiene retorno,  si meustra otra fecha y hora significa que la STB NO tiene retorno ‚ùå.\n\n`+
                `Para las STB consultadas y que no existen en el DAC te devolver√° solo una imagen indicando que no encontr√≥ la serie en el DAC.\n\n` +
                `<b>Si tienes dudas o encuentas alg√∫n bug con la app puedes consultarle  a Sotoj</b>.` 

                
    bot.help( (ctx) => { ctx.replyWithHTML(text); });

    bot.command(['validar', 'VALIDAR', 'Validar'], (ctx) => {
        count = 1;
        console.log(`Usuario: ${ ctx.from.first_name }`);
        ctx.reply('ü§ñ Por favor ingresa el n√∫mero de serie "Host SN" üî¢');
            bot.hears(/^[a-zA-Z0-9]{12}/, async (ctx) => {
                if (count === 1) {
                    count = 0;
                    ctx.reply('‚è≥');
                    sn = (ctx.message.text).toUpperCase();
                    
                    //the deploy function return an array of bytes into a buffer
                    const images = await pageDeploy.deploy(sn);
                    images.forEach(async (buff) => {
                        const imgStream = bufferToStream(buff);
                        await ctx.replyWithPhoto({ source: imgStream });    
                    });                
                }
            });

        
    //     // bot.use(async (ctx, next) => {
    //     //     console.log(ctx.message.text);
    //     //     await next() // runs next middleware

    //     //     console.log('de regreso');
    //     // })
                    


        
    //     //chatId =  ctx.message.chat.id;

    });
    bot.launch(); 
    
}
robot();
